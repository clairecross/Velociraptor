combined.data$gated_pop <- recode_factor(as.factor(combined.data$Gate_Name), gate.pop.id)
combined.data$gated_pop <- as.factor(combined.data$Gate_Name)
View(combined.data)
combined.data$gated_pop <- mutate(combined.data$gated_pop, as.integer)
gated.pop.id
gate.pop.id
names(gate.pop.id)
values(gate.pop.id)
combined.data$gated_pop <- factor(combined.data$Gate_Name, labels=names(gate.pop.id), levels=gate.pop.id)
# combined.data$gated_pop <- mutate(combined.data$gated_pop, as.integer)
View(combined.data)
#replace gate name with pop name - set to match Tietscher pop nums
gate.pop.id <- data.frame(ID=c(1:length(unique(gate.name))), Gate_Name=unique(gate.name)) #Tumor
View(gate.pop.id)
#replace gate name with pop name - set to match Tietscher pop nums
gate.pop.id <- data.frame(ID=c(1:length(unique(gate.name))), Gate_Name=unique(gate.name)) #Tumor
all.data <- left_join(combined.data, gate.pop.id)
View(combined.data)
colnames(combined.data)
all.data <- left_join(combined.data, gate.pop.id)
View(gate.pop.id)
combined.data$gated_pop <- lapply(combined.data$Gate_Name, function(x) gate.pop.id[match(x, gate.pop.id$Gate_Name),'ID'])
View(combined.data)
#extract patient number and cell population from fcs file names
patient.num <- unlist(lapply(fcs.files, function(x) str_split(x, '_')[[1]][9]))
gate.name <- lapply(fcs.files, function(x) str_split(x, '_')[[1]][12])
gate.name <- unlist(lapply(pop.num, function(x) str_split(x, '.fcs')[[1]][1]))
View(gate.pop.id)
#Tietscher files
#select markers for MEM
MEM.data <- combined.data[,c(2:13, 15:20, 22:27, 29, 31:35, 42, ncol(combined.data))]
colnames(MEM.data)[ncol(MEM.data)] <- 'cluster'
# #rename markers
# panel.info <- as.data.frame(matrix(ncol=3, nrow=length(columns)))
# colnames(panel.info) <- c('indices', 'full_names', 'trimmed_names')
# panel.info$indices <- columns
# panel.info$full_names <- panel.info$trimmed_names <- colnames(combined.data)[columns]
# print(panel.info$trimmed_names)
#
# #select MEM data
# MEM.data <- combined.data[,c(panel.info$indices, ncol(combined.data))]
# colnames(MEM.data) <- c(panel.info$trimmed_names, 'cluster')
colnames(MEM.data)
output.path
setwd(output.path)
#run absolute MEM with data transformation
MEM.values <- MEM(MEM.data, transform=T, cofactor=1, zero.ref=T)
View(MEM.data)
setwd(output.path)
#run absolute MEM with data transformation
MEM.values <- MEM(MEM.data, transform=T, cofactor=1, zero.ref=T)
unique(MEM.data$cluster)
MEM.data$cluster <- as.numeric(MEM.data$cluster)
setwd(output.path)
#run absolute MEM with data transformation
MEM.values <- MEM(MEM.data, transform=T, cofactor=1, zero.ref=T)
MEM.data <- as.numeric(MEM.data)
MEM.data <- apply(MEM.data, 2, as.numeric)
View(MEM.data)
setwd(output.path)
#run absolute MEM with data transformation
MEM.values <- MEM(MEM.data, transform=T, cofactor=1, zero.ref=T)
build_heatmaps(MEM.values, cluster.MEM='none', display.thresh=0, output.files=T)
#run relative MEM with data transformation
MEM.values <- MEM(MEM.data, transform=T, cofactor=1, zero.ref=F)
build_heatmaps(MEM.values, cluster.MEM='none', display.thresh=0, output.files=T)
knitr::opts_chunk$set(echo = TRUE)
# # uncomment lines below to install packages
# if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
# BiocManager::install("Biobase")
# BiocManager::install("flowCore")
# install.packages("ggplot2", repos = "http://cran.us.r-project.org")
# install.packages("tidyverse", repos = "http://cran.us.r-project.org")
# install.packages("cowplot", repos = "http://cran.us.r-project.org")
# install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
# #install.packages("viridis", repos = "http://cran.us.r-project.org")
# #install.packages("data.table", repos = "http://cran.us.r-project.org")
# install.packages("stringr", repos = "http://cran.us.r-project.org")
# install.packages("FNN", repos = "http://cran.us.r-project.org")
# #install.packages("matrixStats", repos = "http://cran.us.r-project.org")
# BiocManager::install("cytoMEM")
# # install.packages("gplots", repos = "http://cran.us.r-project.org")
# # install.packages("gbutils", repos = "http://cran.us.r-project.org")
# install.packages("dbscan", repos = "http://cran.us.r-project.org")
# install.packages("scales", repos = "http://cran.us.r-project.org")
#load packages into the working library
suppressPackageStartupMessages({library(Biobase)
library(flowCore)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(RColorBrewer)
library(viridis)
library(stringr)
library(FNN)
library(cytoMEM)
library(ggbeeswarm)
library(scales)})
source("./R/general_plots.R")
source("./R/VR-Eye_functions.R")
source("./R/VR-Eye_plots.R")
source('./R/tatarize_color_palette.R')
expr.colors = colorRampPalette(rev(brewer.pal(n = 11, name = "Spectral")))(5)
#specify fcs file location and output path
file.path <- paste0(getwd(), '/data files/IMC - Tietscher et al/')
og.output.path <- paste0(getwd(), '/output files/VR-Eye_IMC/')
#locate fcs file
fcs.files <- dir(path = file.path, pattern = "*.fcs")
print(fcs.files)
#do you wish to downsample the data?
sample.files <- FALSE
sample.num <- 1000
#load cell data
setwd(file.path)
data.lists <- lapply(lapply(fcs.files, read.FCS, truncate_max_range = FALSE),exprs)
combined.patient.data <- as.data.frame(do.call(rbind, data.lists))
colnames(combined.patient.data)[1:(ncol(combined.patient.data)-2)] <- (read.FCS(fcs.files[[1]])@parameters@data[["desc"]])
colnames(combined.patient.data)
if (sample.files == TRUE){
#set seed for reproducibility
set.seed(1)
#split into individual files
files.to.sample <- split(combined.patient.data, combined.patient.data$`File_ID`)
sampled.data <- list()
for (i in 1:length(files.to.sample)){
#file has a lot of cells => we must downsample
if ((nrow(files.to.sample[[i]])) >= sample.num){
sampled.data[[i]] <- as.data.frame(files.to.sample[[i]][sample(nrow(files.to.sample[[i]]), sample.num), ])
#not enough cells to downsample => just keep all of the cells present
}else{sampled.data[[i]] <- files.to.sample[[i]]}
}
#combine list data into one big data frame
combined.sampled.data <- as.data.frame(do.call(rbind, sampled.data))
}else{combined.sampled.data <- combined.patient.data}
print(paste0(nrow(combined.sampled.data), ' cells will be analyzed'))
#select tSNE columns
tSNE.indx1 <- 49
tSNE.indx2 <- 50
tSNE.data <- combined.sampled.data[, c(tSNE.indx1:tSNE.indx2)]
colnames(tSNE.data) <- c("tSNE1", "tSNE2")
#clean up column names, mark the ones used to generate the t-SNE-CUDA
protein.markers <- c(1:38, 41:43)
tsne.markers <- c(2:20, 22:27, 29, 31:36, 42:43)
#select marker channels
panel.info <- as.data.frame(matrix(nrow=length(protein.markers), ncol=3))
colnames(panel.info) <- c('indices', 'full_names', 'trimmed_names')
panel.info$indices <- protein.markers
panel.info$full_names <- colnames(combined.sampled.data)[protein.markers]
panel.info$trimmed_names <- colnames(combined.sampled.data)[protein.markers]
marker.data <- combined.sampled.data[, panel.info$indices]
#arcsinh transformation
cofactor <- 1
marker.data <- asinh(marker.data/cofactor)
colnames(marker.data) <- panel.info$trimmed_names
#plot tSNE axes
tsne.plot <- ggplot(tSNE.data) + geom_point(aes(x=tSNE1, y=tSNE2), color='lightgrey') +
labs(x='t-SNE2', y='t-SNE1', title='IMC Breast Cancer',
caption="Data from Tietscher et al., Nature. 2023") +
coord_fixed(ratio=1) + theme_bw() + theme(panel.grid = element_blank())
print(tsne.plot)
# #plot cell density on t-SNE axes
# tsne.dens.plot <- tsne_density(tSNE.data, orientation=1, capt="Data from Tietscher et al., Nature. 2023", export=TRUE, output_path=og.output.path)
#
# #plot heat on markers
# tsne.heat.on.markers <- tsne_heat_on_markers(tSNE.data, marker.data, n_col=7, orientation=1, export=TRUE, output_path=og.output.path)
#KNN settings
kvalue <- 60
#set minimum cluster size
min.cluster <- 15
#DBSCAN settings
db.eps <- 2
#look for existing KNN labels file
knn.path <- og.output.path
setwd(knn.path)
knn.data.file <- dir(pattern='knn labels.RData')
rds.name <- paste0(knn.path, 'knn labels.RData')
#load knn.labels if the file exists; otherwise, calculate knn.labels
if(is.na(knn.data.file[1])){
start_time = Sys.time()
knn.labels = knn_MEM(tSNE.data, marker.data, kvalue=kvalue)
total_time = Sys.time() - start_time
print(' KNN MEM completed in ')
print(total_time)
#save as rds
save(knn.labels, file = paste0(og.output.path, 'knn labels.RData'))
}else{load(file=rds.name)}
#specify searching labels and goals
goals <- c('B cell', 'plasma cell', 'NK', 'T cell', 'CD4 T cell', 'CD8 T cell', 'Treg', 'aDC', 'pDC', 'Myeloid', 'Neutrophil', 'Tumor', 'Fibroblast', 'Endothelial')
ref.labels <- c('HLA-DR+7 CD20+6 CD45RA+6 CD45RO+6 MMP9+3 E-Cadherin+2 CD4+2 CD27+1 CD68+1 CD3+1 CD11c+1 PD1+1 Tim-3+1 CD274+1 FOXP3+1 CD8a+1 CD140b+1 CD40+1 CD31_vWF+1 CD15+1 SMA+0 panCK+0 CD38+0 CD303+0 LAG-3+0 CD7+0 LAMP3+0 TCF7+0 ICOS+0 GITR+0 CD21+0',
'HLA-DR+4 MMP9+3 CD45RO+3 CD31_vWF+3 E-Cadherin+2 CD38+2 CD68+2 CD45RA+2 Tim-3+2 CD140b+2 CD4+2 SMA+1 CD27+1 CD303+1 CD7+1 CD3+1 CD11c+1 PD1+1 CD274+1 TCF7+1 GITR+1 CD40+1 CD15+1 panCK+0 LAG-3+0 CD20+0 LAMP3+0 FOXP3+0 ICOS+0 CD8a+0 CD21+0',
'CD45RO+4 HLA-DR+3 CD7+2 MMP9+2 CD140b+2 CD4+2 SMA+1 E-Cadherin+1 CD68+1 CD45RA+1 CD3+1 CD11c+1 Tim-3+1 GITR+1 CD31_vWF+1 CD15+1 panCK+0 CD38+0 CD27+0 CD303+0 LAG-3+0 CD20+0 LAMP3+0 PD1+0 CD274+0 TCF7+0 FOXP3+0 ICOS+0 CD8a+0 CD40+0 CD21+0',
'CD45RO+7 HLA-DR+6 CD4+6 CD3+5 CD7+3 MMP9+3 CD8a+3 CD68+2 CD11c+2 Tim-3+2 CD140b+2 CD31_vWF+2 SMA+1 E-Cadherin+1 CD38+1 CD27+1 CD45RA+1 PD1+1 CD274+1 TCF7+1 FOXP3+1 ICOS+1 GITR+1 CD40+1 CD15+1 panCK+0 CD303+0 LAG-3+0 CD20+0 LAMP3+0 CD21+0',
'CD45RO+7 HLA-DR+6 CD4+6 CD3+5 CD7+3 MMP9+3 CD140b+3 CD68+2 CD11c+2 Tim-3+2 CD31_vWF+2 SMA+1 E-Cadherin+1 CD27+1 CD45RA+1 PD1+1 CD274+1 TCF7+1 FOXP3+1 ICOS+1 CD8a+1 GITR+1 CD40+1 CD15+1 panCK+0 CD38+0 CD303+0 LAG-3+0 CD20+0 LAMP3+0 CD21+0',
'CD8a+7 HLA-DR+6 CD45RO+6 CD3+5 CD4+4 CD7+3 MMP9+3 CD68+2 CD11c+2 Tim-3+2 CD140b+2 CD31_vWF+2 SMA+1 E-Cadherin+1 CD38+1 CD27+1 CD45RA+1 PD1+1 CD274+1 TCF7+1 ICOS+1 GITR+1 CD40+1 CD15+1 panCK+0 CD303+0 LAG-3+0 CD20+0 LAMP3+0 FOXP3+0 CD21+0',
'HLA-DR+7 CD45RO+7 CD4+6 CD3+5 CD7+4 FOXP3+4 CD68+3 Tim-3+3 MMP9+3 CD140b+3 CD27+2 CD11c+2 ICOS+2 GITR+2 CD31_vWF+2 SMA+1 E-Cadherin+1 CD38+1 CD45RA+1 PD1+1 CD274+1 TCF7+1 CD40+1 CD15+1 panCK+0 CD303+0 LAG-3+0 CD20+0 LAMP3+0 CD8a+0 CD21+0',
'HLA-DR+9 CD45RO+4 CD4+4 CD68+3 Tim-3+3 MMP9+3 E-Cadherin+2 CD11c+2 CD140b+2 CD31_vWF+2 SMA+1 CD27+1 CD7+1 CD45RA+1 CD3+1 LAMP3+1 PD1+1 CD274+1 CD40+1 CD15+1 panCK+0 CD38+0 CD303+0 LAG-3+0 CD20+0 TCF7+0 FOXP3+0 ICOS+0 CD8a+0 GITR+0 CD21+0',
'HLA-DR+6 CD45RO+4 CD4+4 CD68+3 MMP9+3 CD303+2 CD45RA+2 Tim-3+2 CD140b+2 CD31_vWF+2 E-Cadherin+1 CD27+1 CD7+1 CD3+1 CD11c+1 PD1+1 CD274+1 CD15+1 SMA+0 panCK+0 CD38+0 LAG-3+0 CD20+0 LAMP3+0 TCF7+0 FOXP3+0 ICOS+0 CD8a+0 GITR+0 CD40+0 CD21+0',
'HLA-DR+8 CD68+6 CD45RO+4 CD4+4 CD11c+3 Tim-3+3 MMP9+3 CD140b+2 CD31_vWF+2 SMA+1 E-Cadherin+1 CD7+1 CD45RA+1 CD3+1 PD1+1 CD274+1 CD40+1 CD15+1 panCK+0 CD38+0 CD27+0 CD303+0 LAG-3+0 CD20+0 LAMP3+0 TCF7+0 FOXP3+0 ICOS+0 CD8a+0 GITR+0 CD21+0',
'CD15+10 MMP9+4 CD45RO+4 HLA-DR+3 E-Cadherin+2 CD4+2 SMA+1 CD68+1 CD45RA+1 CD11c+1 Tim-3+1 CD274+1 CD140b+1 CD31_vWF+1 panCK+0 CD38+0 CD27+0 CD303+0 LAG-3+0 CD20+0 CD7+0 CD3+0 LAMP3+0 PD1+0 TCF7+0 FOXP3+0 ICOS+0 CD8a+0 GITR+0 CD40+0 CD21+0',
'panCK+5 E-Cadherin+4 MMP9+3 CD45RO+3 CD140b+2 CD4+2 HLA-DR+1 CD68+1 CD7+1 CD45RA+1 CD3+1 CD11c+1 PD1+1 Tim-3+1 CD274+1 TCF7+1 FOXP3+1 ICOS+1 GITR+1 CD31_vWF+1 CD15+1 SMA+0 CD38+0 CD27+0 CD303+0 LAG-3+0 CD20+0 LAMP3+0 CD8a+0 CD40+0 CD21+0',
'SMA+3 CD45RO+3 CD140b+3 HLA-DR+2 MMP9+2 CD4+2 E-Cadherin+1 CD68+1 CD45RA+1 CD3+1 CD11c+1 Tim-3+1 CD31_vWF+1 CD15+1 panCK+0 CD38+0 CD27+0 CD303+0 LAG-3+0 CD20+0 CD7+0 LAMP3+0 PD1+0 CD274+0 TCF7+0 FOXP3+0 ICOS+0 CD8a+0 GITR+0 CD40+0 CD21+0',
'CD31_vWF+7 CD45RO+4 CD140b+4 SMA+3 HLA-DR+3 MMP9+3 Tim-3+2 CD4+2 E-Cadherin+1 CD27+1 CD68+1 CD7+1 CD45RA+1 CD3+1 CD11c+1 PD1+1 CD274+1 FOXP3+1 GITR+1 CD40+1 CD15+1 panCK+0 CD38+0 CD303+0 LAG-3+0 CD20+0 LAMP3+0 TCF7+0 ICOS+0 CD8a+0 CD21+0')
#set multi-round variables
current_round <- 0
multi.labels <- data.frame()
multi.df <- combined.sampled.data
#search for each ref label supplied
for (j in 1:length(goals)){
#get goal & search label
goal <- goals[j]
ref.label <- ref.labels[j]
print(paste0('searching for ', goal, ': ', ref.label))
# check that markers in the searching label are being measured in the new dataset
common.label <- check_panel(ref.label, panel.info)
common.ref.MEM.score <- common.label[[1]]
ref.label <- common.label[[2]]
# create output folder
current_round <- current_round + 1
run.folder <- paste0(og.output.path, goal, '/')
dir.create(run.folder)
#VR-Eye search and sim plot
common.MEM.scores <- knn.labels[, colnames(common.ref.MEM.score)]
#check if only one marker
if (!is.data.frame(common.MEM.scores)) {
common.MEM.scores <- as.data.frame(common.MEM.scores)
colnames(common.MEM.scores) <- colnames(common.ref.MEM.score)
}
#calculate similarity
print('calculating similarity')
sim <- sim_scores(common.MEM.scores, common.ref.MEM.score)
my.range <- max(sim)-min(sim)
sim.data <- cbind(marker.data, File_ID = i, tSNE.data, sim)
sim.plot <- VR_Eye_sim_plot(sim.data, ref.label)
#export
png(paste0(run.folder, goal, " similarity.png"),
height = 1500, width = 1500, res = 200)
print(sim.plot)
dev.off()
#save round information to multi.df
print('saving data to multi.df')
this.round <- c()
this.round = cbind(
VRPTR_round = current_round,
search_label = ref.label,
goal = goal,
min.clust = min.cluster,
kvalue = kvalue
)
multi.labels <- rbind(multi.labels, this.round)
save(multi.labels, file = paste0(og.output.path, "multi-run labels.RData"))
#save similarity score in multi-round results df
multi.df <- cbind(multi.df, sim)
colnames(multi.df)[ncol(multi.df)] <- paste0("r", current_round, "_", goal, "_sim")
#update multi.df
rds.name <- paste0(og.output.path, 'multi-run VRPTR.RData')
save(multi.df, file = rds.name)
}
#set multi-round variables
current_round <- 0
multi.labels <- data.frame()
multi.df <- combined.sampled.data
#search for each ref label supplied
for (i in 1:length(goals)){
#get goal & search label
goal <- goals[i]
ref.label <- ref.labels[i]
print(paste0('searching for ', goal, ': ', ref.label))
# check that markers in the searching label are being measured in the new dataset
common.label <- check_panel(ref.label, panel.info)
common.ref.MEM.score <- common.label[[1]]
ref.label <- common.label[[2]]
# create output folder
current_round <- current_round + 1
run.folder <- paste0(og.output.path, goal, '/')
dir.create(run.folder)
#VR-Eye search and sim plot
common.MEM.scores <- knn.labels[, colnames(common.ref.MEM.score)]
#check if only one marker
if (!is.data.frame(common.MEM.scores)) {
common.MEM.scores <- as.data.frame(common.MEM.scores)
colnames(common.MEM.scores) <- colnames(common.ref.MEM.score)
}
#calculate similarity
print('calculating similarity')
sim <- sim_scores(common.MEM.scores, common.ref.MEM.score)
my.range <- max(sim)-min(sim)
sim.data <- cbind(marker.data, File_ID=multi.df$sample.num, tSNE.data, sim)
sim.plot <- VR_Eye_sim_plot(sim.data, ref.label)
#export
png(paste0(run.folder, goal, " similarity.png"),
height = 1500, width = 1500, res = 200)
print(sim.plot)
dev.off()
#save round information to multi.df
print('saving data to multi.df')
this.round <- c()
this.round = cbind(
VRPTR_round = current_round,
search_label = ref.label,
goal = goal,
min.clust = min.cluster,
kvalue = kvalue
)
multi.labels <- rbind(multi.labels, this.round)
save(multi.labels, file = paste0(og.output.path, "multi-run labels.RData"))
#save similarity score in multi-round results df
multi.df <- cbind(multi.df, sim)
colnames(multi.df)[ncol(multi.df)] <- paste0("r", current_round, "_", goal, "_sim")
#update multi.df
rds.name <- paste0(og.output.path, 'multi-run VR-Eye.RData')
save(multi.df, file = rds.name)
}
theme_VRPTR <- function() {
theme_bw() %+replace%
theme(
axis.text = element_blank(),
panel.grid = element_blank(),
axis.title = element_text(size = 16)
)
}
VR_Eye_sim_plot <- function(all.data, ref.label, min.sim=-1, orientation=1) {
plot.data <- all.data[, c("tSNE1","tSNE2","similarity_score")]
plot.data <- plot.data[order(plot.data$similarity_score), ]
#calculate minimum similarity score and color palette ramp
if (min.sim==-1){min.sim <- min(plot.data$similarity_score)}
sim.step <- (100-min.sim)/4
#calculate a ratio to make the t-SNE axes a square
range <- apply(apply(plot.data[, 1:2], 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
if(orientation==1){ #x=tSNE1, y=tSNE2
#plot
sim.plot <- ggplot(plot.data) +
geom_point(aes(x = tSNE1, y = tSNE2, col = similarity_score)) +
coord_fixed(ratio = graphical.ratio) +
scale_color_gradientn(colors = c("lightgrey", "lightgrey", "#5E4FA2", "#88CFA4", "#FFFFBF", "#F88D52", "#9E0142"),
values = rescale(c(0, min.sim-0.00001, min.sim, min.sim+sim.step, min.sim+2*sim.step, min.sim+3*sim.step, 100)),
name = "Similarity", limits=c(0,100)) +
labs(
title = paste0("Similarity: ", ref.label),
x = "t-SNE1", y = "t-SNE2"
) +
theme_VRPTR()
}else if(orientation==2){ #x=tSNE2, y=tSNE1
#plot
sim.plot <- ggplot(plot.data) +
geom_point(aes(x = tSNE2, y = tSNE1, col = similarity_score)) +
coord_fixed(ratio = graphical.ratio) +
scale_color_gradientn(colors = c("lightgrey", "lightgrey", "#5E4FA2", "#88CFA4", "#FFFFBF", "#F88D52", "#9E0142"),
values = rescale(c(0, min.sim-0.00001, min.sim, min.sim+sim.step, min.sim+2*sim.step, min.sim+3*sim.step, 100)),
name = "Similarity", limits=c(0,100)) +
labs(
title = paste0("Similarity: ", ref.label),
x = "t-SNE2", y = "t-SNE1"
) +
theme_VRPTR()
}
return(sim.plot)
}
VR_Eye_bin_plot <- function(all.data, ref.label, bins, orientation=1) {
plot.data <- all.data[order(all.data$sim_bin), c("tSNE1","tSNE2","sim_bin")]
plot.data$sim_bin <- as.factor(plot.data$sim_bin)
bin.colors <- colorRampPalette(c('lightgray','lightgreen','darkgreen'))(length(bins) + 1)
names(bin.colors) <- levels(all.data$sim_bin)
#calculate a ratio to make the t-SNE axes a square
range <- apply(apply(plot.data[, 1:2], 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
if(orientation==1){ #x=tSNE1, y=tSNE2
#plot
bin.plot <- ggplot(plot.data) +
geom_point(aes(x = tSNE1, y = tSNE2, col = sim_bin)) +
coord_fixed(ratio = graphical.ratio) +
scale_color_manual(values = bin.colors, name = ("Similarity bin")) +
labs(
title = paste0("Similarity binned: ", ref.label),
x = "t-SNE 1", y = "t-SNE 2"
) +
theme_bw() +
theme_VRPTR()
}else if(orientation==2){ #x=tSNE2, y=tSNE1
#plot
bin.plot <- ggplot(plot.data) +
geom_point(aes(x = tSNE2, y = tSNE1, col = sim_bin)) +
coord_fixed(ratio = graphical.ratio) +
scale_color_manual(values = bin.colors, name = ("Similarity bin")) +
labs(
title = paste0("Similarity binned: ", ref.label),
x = "t-SNE 2", y = "t-SNE 1"
) +
theme_bw() +
theme_VRPTR()
}
return(bin.plot)
}
VR_Eye_cluster_plot <- function(all.data,
cluster.data,
sim.plot = NULL,
color.scheme = "tatarize",
ref.label = "",
orientation=1) {
plot.data <- all.data[, c("tSNE1","tSNE2")]
num_clusters = length(unique(cluster.data$cluster))
if (color.scheme == "qual") {
set.seed(5)
qual_col_pals <- brewer.pal.info[brewer.pal.info$category == "qual", ]
col_vector <- unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
cluster.colors <- sample(col_vector)
} else if (color.scheme == "sim") {
cluster.colors <- sim_colors(num_clusters, sim.plot)
} else if (color.scheme == "tatarize") {
cluster.colors <- tatarize_optimized(num_clusters)
}
#calculate a ratio to make the t-SNE axes a square
range <- apply(apply(plot.data[, 1:2], 2, range), 2, diff)
graphical.ratio <- (range[1] / range[2])
if(orientation==1){ #x=tSNE1, y=tSNE2
#plot
cluster.plot <- ggplot(plot.data) +
geom_point(aes(x = tSNE1, y = tSNE2), col = "lightgray") +
geom_point(data = cluster.data, aes(x = tSNE1, y = tSNE2, col = as.factor(cluster))) +
coord_fixed(ratio = graphical.ratio) +
scale_color_manual(values = cluster.colors, name = "Cluster", labels = cluster.avg$label) +
labs(
title = paste0("Ordered clusters: ", ref.label),
x = "t-SNE 1", y = "t-SNE 2"
) +
guides(color = guide_legend(override.aes = list(size = 5))) +
theme_VRPTR()
}else if(orientation==2){ #x=tSNE2, y=tSNE1
#plot
cluster.plot <- ggplot(plot.data) +
geom_point(aes(x = tSNE2, y = tSNE1), col = "lightgray") +
geom_point(data = cluster.data, aes(x = tSNE2, y = tSNE1, col = as.factor(cluster))) +
coord_fixed(ratio = graphical.ratio) +
scale_color_manual(values = cluster.colors, name = "Cluster", labels = cluster.avg$label) +
labs(
title = paste0("Ordered clusters: ", ref.label),
x = "t-SNE 2", y = "t-SNE 1"
) +
guides(color = guide_legend(override.aes = list(size = 5))) +
theme_VRPTR()
}
return(cluster.plot)
}
sim_colors <- function(num.clusters, sim.plot) {
sim.built = ggplot_build(sim.plot)
sim.colors = unique(sim.built$data[[1]]["colour"])[, 1]
if (num.clusters > length(sim.colors)) {
cluster.colors <- rev(colorRampPalette(sim.colors)(num.clusters))
} else {
set.seed(1)
color.indxs = sample(length(sim.colors), num.clusters)
color.indxs <- color.indxs[order(color.indxs, decreasing = TRUE)]
cluster.colors <- sim.colors[color.indxs]
}
return(cluster.colors)
}
#set multi-round variables
current_round <- 0
multi.labels <- data.frame()
multi.df <- combined.sampled.data
#search for each ref label supplied
for (i in 1:length(goals)){
#get goal & search label
goal <- goals[i]
ref.label <- ref.labels[i]
print(paste0('searching for ', goal, ': ', ref.label))
# check that markers in the searching label are being measured in the new dataset
common.label <- check_panel(ref.label, panel.info)
common.ref.MEM.score <- common.label[[1]]
ref.label <- common.label[[2]]
# create output folder
current_round <- current_round + 1
run.folder <- paste0(og.output.path, goal, '/')
dir.create(run.folder)
#VR-Eye search and sim plot
common.MEM.scores <- knn.labels[, colnames(common.ref.MEM.score)]
#check if only one marker
if (!is.data.frame(common.MEM.scores)) {
common.MEM.scores <- as.data.frame(common.MEM.scores)
colnames(common.MEM.scores) <- colnames(common.ref.MEM.score)
}
#calculate similarity
print('calculating similarity')
sim <- sim_scores(common.MEM.scores, common.ref.MEM.score)
my.range <- max(sim)-min(sim)
sim.data <- cbind(marker.data, File_ID=multi.df$sample.num, tSNE.data, sim)
sim.plot <- VR_Eye_sim_plot(sim.data, ref.label)
#export
png(paste0(run.folder, goal, " similarity.png"),
height = 1500, width = 1500, res = 200)
print(sim.plot)
dev.off()
#save round information to multi.df
print('saving data to multi.df')
this.round <- c()
this.round = cbind(
VRPTR_round = current_round,
search_label = ref.label,
goal = goal,
min.clust = min.cluster,
kvalue = kvalue
)
multi.labels <- rbind(multi.labels, this.round)
save(multi.labels, file = paste0(og.output.path, "multi-run labels.RData"))
#save similarity score in multi-round results df
multi.df <- cbind(multi.df, sim)
colnames(multi.df)[ncol(multi.df)] <- paste0("r", current_round, "_", goal, "_sim")
#update multi.df
rds.name <- paste0(og.output.path, 'multi-run VR-Eye.RData')
save(multi.df, file = rds.name)
}
