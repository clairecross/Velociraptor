knitr::opts_chunk$set(echo = TRUE)
# # uncomment lines below to install packages
# if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
# #install.packages("devtools", repos = "http://cran.us.r-project.org")
# BiocManager::install("cytoMEM")
# install.packages("tidyverse", repos = "http://cran.us.r-project.org")
# install.packages("dplyr", repos = "http://cran.us.r-project.org")
# #install.packages("ggpubr", repos = "http://cran.us.r-project.org")
# BiocManager::install("flowCore")
# BiocManager::install("Biobase")
# install.packages("survival", repos = "http://cran.us.r-project.org")
# install.packages("survminer", repos = "http://cran.us.r-project.org")
# install.packages("plyr", repos = "http://cran.us.r-project.org")
# install.packages("cowplot", repos = "http://cran.us.r-project.org")
# install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
# install.packages("FNN", repos = "http://cran.us.r-project.org")
# install.packages("fancycut", repos = "http://cran.us.r-project.org")
# install.packages("dbscan", repos = "http://cran.us.r-project.org")
# install.packages("ggplot2", repos = "http://cran.us.r-project.org")
#load packages into the working library
suppressPackageStartupMessages({#library(devtools)
library(cytoMEM)
library(tidyverse)
library(dplyr)
# library(ggpubr)
library(flowCore)
library(Biobase)
library(survival)
library(survminer)
library(plyr)
library(cowplot)
library(RColorBrewer)
library(FNN)
library(fancycut)
library(dbscan)
library(ggplot2)})
source('./R/general_plots.R')
source('./R/VR-Claw_plots.R')
source('./R/VR-Claw_functions.R')
source('./R/tatarize_color_palette.R')
#specify fcs file location and output path
file.path <- './data files/RAPID - Leelatian and Sinnaeve et al/'
output.path <- './output files/VR-Claw_RAPID/'
#locate fcs file
fcs.files <- dir(path = file.path, pattern = "*.fcs")
print(fcs.files)
#load cell data
setwd(file.path)
data.list <- lapply(lapply(fcs.files, read.FCS, truncate_max_range = FALSE), exprs)
combined.patient.data <- as.data.frame(do.call(rbind, mapply(cbind, data.list, "File_ID"= c(1:length(data.list)), SIMPLIFY=F)))
colnames(combined.patient.data)[1:(ncol(combined.patient.data)-1)] <- as.character(read.FCS(fcs.files[1], truncate_max_range=FALSE)@parameters@data[["desc"]])
colnames(combined.patient.data)
#store number of cells per file
sample_num <- nrow(combined.patient.data[which(combined.patient.data$File_ID == 1),]) #assumes equal number of cells in every file
#load clinical data
OS.data.files <-  dir(pattern="*.csv")
OS.data <- read.csv(OS.data.files)
#arcsinh transformation
cofactor <- 5
transformed.data <- combined.patient.data %>% select(-contains('File_ID')) %>%
select(-contains('tSNE')) %>% mutate_all(function(x) asinh(x/cofactor))
#choose markers to use downstream for MEM calculations
chosen.markers <- transformed.data %>% select(contains('(v2)') | contains('CycinB1'))
chosen.marker.idxs <- c(4, 6, 8:9, 13, 15, 17:18, 20:21, 23:26, 28:37, 39)
print(colnames(combined.patient.data[chosen.marker.idxs]))
#select tsne indices
tsne.data <- combined.patient.data[46:47]
colnames(tsne.data) <- c('tSNE1', 'tSNE2')
#plot tSNE axes
tsne.plot <- ggplot(tsne.data) + geom_point(aes(x=tSNE2, y=tSNE1), color='lightgrey') +
labs(x='t-SNE2', y='t-SNE1', title='RAPID GBM Cohort',
caption="Data from Leelatian & Sinnaeve et al., eLife. 2020") +
coord_fixed(ratio=1) + theme_bw() + theme(panel.grid = element_blank())
print(tsne.plot)
# #plot cell density on t-SNE axes
# tsne.dens.plot <- tsne_density(tsne.data, export=TRUE, output_path=output.path)
#
# #plot heat on markers
# tsne.heat.on.markers <- tsne_heat_on_markers(tsne.data, chosen.markers, n_col=5, export=TRUE, output_path=output.path)
#choose clinical data for VR-Claw
clinical_col <- 3 #OS Time
status_col <- 4 #OS Status
#define color palette
col.palette <- c("p>0.1" ="lightgray" ,
"p<0.01 HR>1" = "darkred",
"p<0.05 HR>1" = "red",
"p<0.1 HR>1" = "darkgray",
"p<0.01 HR<1" = "darkblue",
"p<0.05 HR<1" = "blue",
"p<0.1 HR<1"= "darkgray")
#k-value for k-nearest neighbors
kval <- floor(sqrt(nrow(tsne.data)))
#filtering variables
min.patients.per.cluster <- 1
min.cells.per.cluster <- 25
pval.cutoff <- 0.05
#load neighborhood survival data
load(paste0(output.path, 'cox summary.RData'))
load(paste0(output.path, 'num patients.RData'))
#create output folders
dir.create(paste0(output.path, '/unfiltered'))
dir.create(paste0(output.path, '/filtered'))
#original VR-Claw Plot
VR.Claw.plot <- VR_Claw_plot_fxn(tsne.data, x_idx=2, y_idx=1, survival_stats=cox.summary,
plot.title='VR-Claw Prognostic Populations - unfiltered',
xlab='t-SNE 2', ylab='t-SNE 1')
print(VR.Claw.plot)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(), "%Y-%m-%d"), " original VR-Claw plot.png"),
res = 200, width = 1500, height = 1500)
print(VR.Claw.plot)
dev.off()
#add VR-Claw results to cell data
marker.tsne.data <- cbind(combined.patient.data[,c(1:43, 48)], tsne.data)
all.data <- left_join(marker.tsne.data, plotting.data[,c(1,2,4,5)],
by=join_by(tSNE1, tSNE2))
View(VR.Claw.plot)
#add VR-Claw results to cell data
marker.tsne.data <- cbind(combined.patient.data[,c(1:43, 48)], tsne.data)
all.data <- left_join(marker.tsne.data, VR.Claw.plot[["data"]][,c(1,2,4,5)],
by=join_by(tSNE1, tSNE2))
#add VR-Claw results to cell data
marker.tsne.data <- cbind(combined.patient.data[,c(1:43, 48)], tsne.data)
colnames(VR.Claw.plot[["data"]]) <- c('tSNE1', 'tSNE2')
all.data <- left_join(marker.tsne.data, [,c(1,2,4,5)],
#add VR-Claw results to cell data
marker.tsne.data <- cbind(combined.patient.data[,c(1:43, 48)], tsne.data)
colnames(VR.Claw.plot[["data"]]) <- c('tSNE1', 'tSNE2')
all.data <- left_join(marker.tsne.data, VR.Claw.plot[["data"]][,c(1,2,4,5)],
by=join_by(tSNE1, tSNE2))
View(VR.Claw.plot[["data"]])
#original VR-Claw Plot
VR.Claw.plot <- VR_Claw_plot_fxn(tsne.data, x_idx=2, y_idx=1, survival_stats=cox.summary,
plot.title='VR-Claw Prognostic Populations - unfiltered',
xlab='t-SNE 2', ylab='t-SNE 1')
#add VR-Claw results to cell data
marker.tsne.data <- cbind(combined.patient.data[,c(1:43, 48)], tsne.data)
colnames(VR.Claw.plot[["data"]])[1:2] <- c('tSNE1', 'tSNE2')
all.data <- left_join(marker.tsne.data, VR.Claw.plot[["data"]][,c(1,2,4,5)],
by=join_by(tSNE1, tSNE2))
#cluster cells with p<0.01
regions.of.interest.01 <- all.data %>% dplyr::filter(status == "p<0.01 HR<1" | #dark blue
status == "p<0.01 HR>1" ) #dark red
regions.of.interest.01 <- dbscan_fxn(regions.of.interest.01, c(45, 46), '.01', epsilon=4, minPoints=5)
#plot
dbscan.plot.01 <- dbscan_plot_fxn(regions.of.interest.01, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters (p<0.01)',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_p0.01.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot.01)
dev.off()
#cluster cells with p<0.05
regions.of.interest.05 <- all.data %>% dplyr::filter(status == "p<0.05 HR<1" | #dark blue
status == "p<0.05 HR>1" ) #dark red
regions.of.interest.05 <- dbscan_fxn(regions.of.interest.05, c(45, 46), '.05', epsilon=4, minPoints=5)
#plot
dbscan.plot.05 <- dbscan_plot_fxn(regions.of.interest.05, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters (p<0.05)',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_p0.05.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot.05)
dev.off()
#integrate cluster data
combined.clusters <- rbind(regions.of.interest.05, regions.of.interest.01)
#plot
dbscan.plot <- dbscan_plot_fxn(combined.clusters, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
print(dbscan.plot)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_all clusters.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot)
dev.off()
#add clusters, num.patients.per.cluster, and status to all.data
all.data <- left_join(all.data, combined.clusters)
all.data$cluster <- as.factor(all.data$cluster)
all.data[is.na(all.data)] <- 0 #replace cluster NAs with 0s
save(all.data, file=paste0(output.path, '/survival data.RData'))
#split data by patient ID
patient.subsets <- split(all.data, all.data$File_ID)
#determine cluster abundance for each patient
patient.abundance <- patient_cluster_abundance(patient.subsets)
#cox proportional hazards model for each cluster
cluster.survival.analysis <- cox_ph_cluster_fxn(patient.abundance)
#select GNP cells
GNP.clusters <- patient.abundance[,as.character(unique(combined.clusters[which(combined.clusters$status=="p<0.01 HR>1" | combined.clusters$status=="p<0.05 HR>1"),'cluster']))]
rownames(GNP.clusters) <- OS.data$Patient.ID
#GNP survival analysis
GNP.analysis <- pop_survival_analysis(GNP.clusters, 'GNP', c('black','darkred'))
GNP.clusters <- GNP.analysis[[1]]
GNP.plot <- GNP.analysis[[2]]
print(GNP.plot)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), ' original_GNP survival plot.png'),
height=1000, width=1000, res=200)
print(GNP.plot)
dev.off()
#split data by patient ID
patient.subsets <- split(all.data, all.data$File_ID)
#determine cluster abundance for each patient
patient.abundance <- patient_cluster_abundance(patient.subsets)
#cox proportional hazards model for each cluster
cluster.survival.analysis <- cox_ph_cluster_fxn(patient.abundance)
View(patient.abundance)
all.subset.abundances=patient.abundance
#split patients into HIGH/LOW for each cluster by comparing to the cluster's abundance IQR value
abundance.groups <- list()
for(c in 1:ncol(all.subset.abundances)){ # looping over c = cluster
abundance.IQR <- IQR(all.subset.abundances[,c]) #cluster's abundance IQR value
abundance.groups[[c]] <- (all.subset.abundances[,c]>abundance.IQR) #TRUE=abundance greater than the IQR
abundance.groups[[c]][abundance.groups[[c]]==TRUE] = 1 # 1 = high, 0 = low
}
#Cox proportional hazards model
cox.cluster.summary <- list()
for (s in 1:ncol(all.subset.abundances)){ #looping over s = cluster
Group <- factor(abundance.groups[[s]], levels = c(0,1), labels = c("Low", "High"))
group.survival.data <- cbind(OS.data, Group)
coxph.cluster.model <- coxph(Surv(OS.data[,clinical_col], OS.data[,status_col]) ~ Group, data=group.survival.data)
cox.cluster.summary[[colnames(all.subset.abundances)[s]]] <- summary(coxph.cluster.model)
}
#plotting info
survival.plots <- list()
final.prog.clusters <- c()
pval.list <- c()
HR.list <- c()
for (s in 2:ncol(all.subset.abundances)){ #start at 2 to exclude non VR clusters
if (colnames(all.subset.abundances)[s]!="(Other)"){
cox.cluster.coefficients <- cox.cluster.summary[[s]]$coefficients
CI <- cox.cluster.summary[[s]]$conf.int
Group <- factor(abundance.groups[[s]], levels = c(0,1), labels = c("Low", "High"))
group.survival.data <- cbind(OS.data, Group)
coxph.model <- survfit(Surv(OS.data[,clinical_col], OS.data[,status_col]) ~ Group, data=group.survival.data)
#display cluster stats
cluster.title <- paste0("Subset #", colnames(all.subset.abundances)[s], " (p = ",
round(cox.cluster.coefficients[,5],3), ", HR = ",
round(cox.cluster.coefficients[,2],3), ", CI[",
round(CI[,3],3),",",round(CI[,4],3),"])")
pval.list <- c(pval.list, cox.cluster.summary[[s]][["coefficients"]][,5])
HR.list <- c(HR.list, cox.cluster.summary[[s]][["coefficients"]][,2])
#plot significant clusters
if (cox.cluster.coefficients[,5] <= pval.cutoff){
final.prog.clusters <- c(final.prog.clusters, colnames(all.subset.abundances)[s])
}
survival.plots[[s-1]] <- ggsurvplot(coxph.model,
data=group.survival.data,
conf.int=F,
pval=F,
risk.table=T,
tables.y.text = FALSE,
legend.labs = c("Low", "High"),
legend.title = "Group",
censor.shape=124,
title = cluster.title)
}
}
cox.cluster.coefficients[,5]
View(cox.cluster.summary)
View(patient.abundance)
View(all.data)
#add VR-Claw results to cell data
marker.tsne.data <- cbind(combined.patient.data[,c(1:43, 48)], tsne.data)
colnames(VR.Claw.plot[["data"]])[1:2] <- c('tSNE1', 'tSNE2')
all.data <- left_join(marker.tsne.data, VR.Claw.plot[["data"]][,c(1,2,4,5)],
by=join_by(tSNE1, tSNE2))
#cluster cells with p<0.01
regions.of.interest.01 <- all.data %>% dplyr::filter(status == "p<0.01 HR<1" | #dark blue
status == "p<0.01 HR>1" ) #dark red
regions.of.interest.01 <- dbscan_fxn(regions.of.interest.01, c(45, 46), '.01', epsilon=4, minPoints=5)
#plot
dbscan.plot.01 <- dbscan_plot_fxn(regions.of.interest.01, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters (p<0.01)',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_p0.01.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot.01)
dev.off()
#cluster cells with p<0.05
regions.of.interest.05 <- all.data %>% dplyr::filter(status == "p<0.05 HR<1" | #dark blue
status == "p<0.05 HR>1" ) #dark red
regions.of.interest.05 <- dbscan_fxn(regions.of.interest.05, c(45, 46), '.05', epsilon=4, minPoints=5)
#plot
dbscan.plot.05 <- dbscan_plot_fxn(regions.of.interest.05, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters (p<0.05)',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_p0.05.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot.05)
dev.off()
#integrate cluster data
combined.clusters <- rbind(regions.of.interest.05, regions.of.interest.01)
#plot
dbscan.plot <- dbscan_plot_fxn(combined.clusters, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
print(dbscan.plot)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_all clusters.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot)
dev.off()
#add clusters, num.patients.per.cluster, and status to all.data
all.data <- left_join(all.data, combined.clusters)
all.data$cluster <- as.factor(all.data$cluster)
all.data[is.na(all.data)] <- 0 #replace cluster NAs with 0s
save(all.data, file=paste0(output.path, '/survival data.RData'))
View(all.data)
all.data[is.na(all.data)] <- 0 #replace cluster NAs with 0s
typeof(all.data)
class(all.data)
#add clusters, num.patients.per.cluster, and status to all.data
all.data <- left_join(all.data, combined.clusters)
#add VR-Claw results to cell data
marker.tsne.data <- cbind(combined.patient.data[,c(1:43, 48)], tsne.data)
colnames(VR.Claw.plot[["data"]])[1:2] <- c('tSNE1', 'tSNE2')
all.data <- left_join(marker.tsne.data, VR.Claw.plot[["data"]][,c(1,2,4,5)],
by=join_by(tSNE1, tSNE2))
#cluster cells with p<0.01
regions.of.interest.01 <- all.data %>% dplyr::filter(status == "p<0.01 HR<1" | #dark blue
status == "p<0.01 HR>1" ) #dark red
regions.of.interest.01 <- dbscan_fxn(regions.of.interest.01, c(45, 46), '.01', epsilon=4, minPoints=5)
#plot
dbscan.plot.01 <- dbscan_plot_fxn(regions.of.interest.01, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters (p<0.01)',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_p0.01.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot.01)
dev.off()
#cluster cells with p<0.05
regions.of.interest.05 <- all.data %>% dplyr::filter(status == "p<0.05 HR<1" | #dark blue
status == "p<0.05 HR>1" ) #dark red
regions.of.interest.05 <- dbscan_fxn(regions.of.interest.05, c(45, 46), '.05', epsilon=4, minPoints=5)
#plot
dbscan.plot.05 <- dbscan_plot_fxn(regions.of.interest.05, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters (p<0.05)',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_p0.05.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot.05)
dev.off()
#integrate cluster data
combined.clusters <- rbind(regions.of.interest.05, regions.of.interest.01)
#plot
dbscan.plot <- dbscan_plot_fxn(combined.clusters, x_idx=46, y_idx=45,
plot.title='DBSCAN Clusters',
xlab='t-SNE2', ylab='t-SNE1', axis_lim=100)
print(dbscan.plot)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), " DBSCAN_all clusters.png"),
res = 200, width = 2000, height = 2000)
print(dbscan.plot)
dev.off()
#add clusters, num.patients.per.cluster, and status to all.data
all.data <- left_join(all.data, combined.clusters)
all.data[is.na(all.data)] <- 0 #replace cluster NAs with 0s
all.data$cluster <- as.factor(all.data$cluster)
save(all.data, file=paste0(output.path, '/survival data.RData'))
View(all.data)
#split data by patient ID
patient.subsets <- split(all.data, all.data$File_ID)
#determine cluster abundance for each patient
patient.abundance <- patient_cluster_abundance(patient.subsets)
#cox proportional hazards model for each cluster
cluster.survival.analysis <- cox_ph_cluster_fxn(patient.abundance)
survival.plots <- cluster.survival.analysis[[1]]
prognostic.clusters <- cluster.survival.analysis[[2]]
pval.list <- cluster.survival.analysis[[3]]
HR.list <- cluster.survival.analysis[[4]]
#export
ggexport(survival.plots, filename = paste0(output.path, '/unfiltered/',
strftime(Sys.time(),"%Y-%m-%d"), " survival plots.pdf"),
width = 7.2, height = 5.4)
#count cells per cluster
all.clusters <- split(combined.clusters, as.factor(combined.clusters$cluster))
cluster.stats  <- as.data.frame(sapply(all.clusters, NROW))
colnames(cluster.stats)<- "total_counts"
#add survival stats
cluster.stats$pval <- pval.list
cluster.stats$HR <- HR.list
#export
write.csv(cluster.stats,paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"),
" DBSCAN cluster stats.csv"))
#select GNP cells
GNP.clusters <- patient.abundance[,as.character(unique(combined.clusters[which(combined.clusters$status=="p<0.01 HR>1" | combined.clusters$status=="p<0.05 HR>1"),'cluster']))]
rownames(GNP.clusters) <- OS.data$Patient.ID
#GNP survival analysis
GNP.analysis <- pop_survival_analysis(GNP.clusters, 'GNP', c('black','darkred'))
GNP.clusters <- GNP.analysis[[1]]
GNP.plot <- GNP.analysis[[2]]
print(GNP.plot)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), ' original_GNP survival plot.png'),
height=1000, width=1000, res=200)
print(GNP.plot)
dev.off()
write.csv(GNP.clusters, paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), ' original GNP Classification.csv'))
#select GPP cells
GPP.clusters <- patient.abundance[,as.character(unique(combined.clusters[which(combined.clusters$status=="p<0.01 HR<1" | combined.clusters$status=="p<0.05 HR<1"),'cluster']))]
rownames(GPP.clusters) <- OS.data$Patient.ID
#GPP survival analysis
GPP.analysis <- pop_survival_analysis(GPP.clusters, 'GPP', c('black','darkblue'))
GPP.clusters <- GPP.analysis[[1]]
GPP.plot <- GPP.analysis[[2]]
print(GPP.plot)
#export
png(paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), ' original_GPP survival plot.png'),
height=1000, width=1000, res=200)
print(GPP.plot)
dev.off()
write.csv(GPP.clusters, paste0(output.path, '/unfiltered/', strftime(Sys.time(),"%Y-%m-%d"), ' original GPP Classification.csv'))
#select populations that are significantly associates with survival following clustering
sig.clusters <- combined.clusters[which(combined.clusters$cluster %in% final.prog.clusters),]
#count cells per cluster
split.sig.clusters <- split(sig.clusters, as.factor(sig.clusters$cluster))
sig.cluster.stats  <- as.data.frame(sapply(split.sig.clusters, NROW))
#remove any clusters that have fewer than the minimum number of cells
cluster.list <- c()
for (r in 1:nrow(sig.cluster.stats)){ #loop through rows (clusters)
if (sig.cluster.stats[r,1] >= min.cells.per.cluster){ #check if cluster has at least minimum cells
cluster.list <- c(cluster.list, rownames(sig.cluster.stats)[r])
}
}
#refined clusters meet the minimum cell number requirement
filtered.clusters <- sig.clusters[which(sig.clusters$cluster %in% cluster.list),]
#integrate with other data
filtered.data <- left_join(all.data[,1:48], filtered.clusters)
filtered.data[is.na(filtered.data)] <- 0 #replace cluster NAs with 0s
#remove clusters that are no longer significant (set cluster number to 0)
filtered.data[which(!(filtered.data$cluster %in% final.prog.clusters)), 'cluster'] <- 0
filtered.data[which(filtered.data$cluster == 0), 'status'] <- 'p>0.1'
#filtered VR-Claw Plot
filtered.VR.Claw.plot <- VR_Claw_plot_fxn(tsne.data, x_idx=2, y_idx=1, survival_stats=filtered.data,
plot.title='Filtered VR-Claw Prognostic Populations',
xlab='t-SNE 2', ylab='t-SNE 1')
print(filtered.VR.Claw.plot)
#export
png(paste0(output.path, '/filtered/', strftime(Sys.time(),"%Y-%m-%d"), " filtered VR-Claw plot.png"),
res = 200, width = 1500, height = 1500)
print(filtered.VR.Claw.plot)
dev.off()
save(filtered.data, file=paste0(output.path, '/filtered survival data.RData'))
#select GNP cells
GNP.clusters <- patient.abundance[,as.character(unique(filtered.data[which(filtered.data$status=="p<0.01 HR>1" | filtered.data$status=="p<0.05 HR>1"),'cluster']))]
rownames(GNP.clusters) <- OS.data$Patient.ID
#GNP survival analysis
GNP.analysis <- pop_survival_analysis(GNP.clusters, 'GNP', c('black','darkred'))
GNP.clusters <- GNP.analysis[[1]]
GNP.plot <- GNP.analysis[[2]]
print(GNP.plot)
#export
png(paste0(output.path, '/filtered/', strftime(Sys.time(),"%Y-%m-%d"), ' filtered GNP survival plot.png'),
height=1000, width=1000, res=200)
print(GNP.plot)
dev.off()
write.csv(GNP.clusters, paste0(output.path, '/filtered/', strftime(Sys.time(),"%Y-%m-%d"), ' filtered GNP Classification.csv'))
#select GPP cells
GPP.clusters <- patient.abundance[,as.character(unique(filtered.data[which(filtered.data$status=="p<0.01 HR<1" | filtered.data$status=="p<0.05 HR<1"),'cluster']))]
rownames(GPP.clusters) <- OS.data$Patient.ID
#GPP survival analysis
GPP.analysis <- pop_survival_analysis(GPP.clusters, 'GPP', c('black','darkblue'))
GPP.clusters <- GPP.analysis[[1]]
GPP.plot <- GPP.analysis[[2]]
print(GPP.plot)
#export
png(paste0(output.path, '/filtered/', strftime(Sys.time(),"%Y-%m-%d"), ' filtered GPP survival plot.png'),
height=1000, width=1000, res=200)
print(GPP.plot)
dev.off()
write.csv(GPP.clusters, paste0(output.path, '/filtered/', strftime(Sys.time(),"%Y-%m-%d"), ' filtered GPP Classification.csv'))
setwd(output.path)
#create variable for markers to use in MEM
GNP.cells <- filtered.data[which(filtered.data$cluster %in% colnames(GNP.clusters)),
c(chosen.marker.idxs, ncol(filtered.data))]
GPP.cells <- filtered.data[which(filtered.data$cluster %in% colnames(GPP.clusters)),
c(chosen.marker.idxs, ncol(filtered.data))]
MEM.data <- rbind(GNP.cells, GPP.cells)
colnames(MEM.data)[ncol(MEM.data)] <- "cluster"
MEM.data$cluster <- as.numeric(as.character(MEM.data$cluster))
MEM.data <- MEM.data[order(MEM.data$cluster),]
#calculate MEM scores
MEM.values <- MEM(MEM.data, transform = TRUE, cofactor = 5,
zero.ref = TRUE, new.marker.names = "CyclinB1, TUJ1, CD117, S100B, CD34, pSTAT5, pAKT, pSTAT1, CD56, pp38, pSTAT3, CD49F, CD133, PDGFRA, SOX2, CD15, EGFR, pNFkB, CD171, Nestin, CD44, GFAP, pERK, pS6, HLADR")
# build MEM heatmap and output enrichment scores
build_heatmaps(MEM.values, display.thresh = 0, output.files = TRUE,
cluster.MEM = "none", cluster.medians = "none", cluster.IQRs = "none")
