setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
txt.list <- read.table(txt.files[1], col.names = 1)
#load cell data
setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
txt.list <- read.table(txt.files[1], col.names = 1)
#load cell data
setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
txt.list <- read.table(txt.files[1])
txt.files <- dir(path = file.path, pattern = "*.txt")
setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
txt.list <- read.table(txt.files[1])
#load cell data
setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
txt.list <- read.table(txt.files[1])
#load gated data
txt.list <- read.table(txt.files[1], skip=1)
setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
txt.list <- read.table(txt.files[1], skip=1)
View(txt.list)
setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
names <- read.table(txt.files[1], nrows=1)
txt.list <- read.table(txt.files[1], skip=1)
View(names)
names
#load packages into the working library
suppressPackageStartupMessages({library(Biobase)
library(flowCore)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(RColorBrewer)
#library(viridis)
#library(data.table)
library(stringr)
library(FNN)
#library(matrixStats)
library(cytoMEM)
#library(gplots)
#library(gbutils)
library(dbscan)
library(scales)})
source("./R/tSNE_plots.R")
source("./R/VR-Eye_functions.R")
source("./R/VR-Eye_plots.R")
source('./R/tatarize_color_palette.R')
expr.colors = colorRampPalette(rev(brewer.pal(n = 11, name = "Spectral")))(5)
#specify fcs file location and output path
file.path <- paste0(getwd(), '/data files/37 roc characterization/')
og.output.path <- paste0(getwd(), '/output files/37 Roc Dataset/')
dir.create(og.output.path)
#locate fcs file
data.files <- dir(path = file.path, pattern = "*.csv")
print(data.files)
fcs.files <- dir(path = file.path, pattern = "*.fcs")
print(fcs.files)
#do you wish to downsample the data?
sample.files <- FALSE
sample.num <- 1000
#load cell data
setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
data.list <- lapply(lapply(fcs.files, read.FCS), exprs)
#load packages into the working library
suppressPackageStartupMessages({library(Biobase)
library(flowCore)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(RColorBrewer)
#library(viridis)
#library(data.table)
library(stringr)
library(FNN)
#library(matrixStats)
library(cytoMEM)
#library(gplots)
#library(gbutils)
library(dbscan)
library(scales)})
source("./R/tSNE_plots.R")
source("./R/VR-Eye_functions.R")
source("./R/VR-Eye_plots.R")
source('./R/tatarize_color_palette.R')
expr.colors = colorRampPalette(rev(brewer.pal(n = 11, name = "Spectral")))(5)
#specify fcs file location and output path
file.path <- paste0(getwd(), '/data files/37 roc characterization/')
og.output.path <- paste0(getwd(), '/output files/37 Roc Dataset/')
dir.create(og.output.path)
#locate fcs file
data.files <- dir(path = file.path, pattern = "*.csv")
print(data.files)
fcs.files <- dir(path = file.path, pattern = "*.fcs")
fcs.files <- dir(path = file.path, pattern = "*.txt")
#do you wish to downsample the data?
sample.files <- FALSE
sample.num <- 1000
#load cell data
setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
data.list <- lapply(lapply(txt.files, read.table, skip=1), exprs)
knitr::opts_chunk$set(echo = TRUE)
# # uncomment lines below to install packages
# if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
# BiocManager::install("Biobase")
# BiocManager::install("flowCore")
# install.packages("ggplot2", repos = "http://cran.us.r-project.org")
# install.packages("tidyverse", repos = "http://cran.us.r-project.org")
# install.packages("cowplot", repos = "http://cran.us.r-project.org")
# install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
# #install.packages("viridis", repos = "http://cran.us.r-project.org")
# #install.packages("data.table", repos = "http://cran.us.r-project.org")
# install.packages("stringr", repos = "http://cran.us.r-project.org")
# install.packages("FNN", repos = "http://cran.us.r-project.org")
# #install.packages("matrixStats", repos = "http://cran.us.r-project.org")
# BiocManager::install("cytoMEM")
# # install.packages("gplots", repos = "http://cran.us.r-project.org")
# # install.packages("gbutils", repos = "http://cran.us.r-project.org")
# install.packages("dbscan", repos = "http://cran.us.r-project.org")
# install.packages("scales", repos = "http://cran.us.r-project.org")
#load packages into the working library
suppressPackageStartupMessages({library(Biobase)
library(flowCore)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(RColorBrewer)
#library(viridis)
#library(data.table)
library(stringr)
library(FNN)
#library(matrixStats)
library(cytoMEM)
#library(gplots)
#library(gbutils)
library(dbscan)
library(scales)})
source("./R/tSNE_plots.R")
source("./R/VR-Eye_functions.R")
source("./R/VR-Eye_plots.R")
source('./R/tatarize_color_palette.R')
expr.colors = colorRampPalette(rev(brewer.pal(n = 11, name = "Spectral")))(5)
#specify fcs file location and output path
file.path <- paste0(getwd(), '/data files/37 roc characterization/')
og.output.path <- paste0(getwd(), '/output files/37 Roc Dataset/')
dir.create(og.output.path)
#locate fcs file
data.files <- dir(path = file.path, pattern = "*.csv")
print(data.files)
fcs.files <- dir(path = file.path, pattern = "*.fcs")
fcs.files <- dir(path = file.path, pattern = "*.txt")
#do you wish to downsample the data?
sample.files <- FALSE
sample.num <- 1000
#load cell data
setwd(file.path)
roc.data <- read.csv(data.files, row.names = 1)
colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
# #load gated data
# data.list <- lapply(lapply(txt.files, read.table, skip=1), exprs)
# gated.data <- as.data.frame(do.call(rbind, mapply(cbind, data.list, "File_ID"= c(1:length(fcs.files)), SIMPLIFY=F)))
# colnames(gated.data)[1:(ncol(gated.data)-3)] <- as.character(read.FCS(fcs.files[1], truncate_max_range=FALSE)@parameters@data[["desc"]])
# colnames(gated.data)
if (sample.files == TRUE){
#set seed for reproducibility
set.seed(1)
#split into individual files
files.to.sample <- split(roc.data, roc.data$`File_ID`)
sampled.data <- list()
for (i in 1:length(files.to.sample)){
#file has a lot of cells => we must downsample
if ((nrow(files.to.sample[[i]])) >= sample.num){
sampled.data[[i]] <- as.data.frame(files.to.sample[[i]][sample(nrow(files.to.sample[[i]]), sample.num), ])
#not enough cells to downsample => just keep all of the cells present
}else{sampled.data[[i]] <- files.to.sample[[i]]}
}
#combine list data into one big data frame
combined.sampled.data <- as.data.frame(do.call(rbind, sampled.data))
}else{combined.sampled.data <- roc.data}
print(paste0(nrow(combined.sampled.data), ' cells will be analyzed'))
#select tSNE columns
tSNE.indx1 <- 25
tSNE.indx2 <- 26
tSNE.data <- combined.sampled.data[, c(tSNE.indx1:tSNE.indx2)]
colnames(tSNE.data) <- c("tSNE1", "tSNE2")
#select marker channels
panel.info <- as.data.frame(matrix(nrow=11, ncol=3))
colnames(panel.info) <- c('indices', 'full_names', 'trimmed_names')
panel.info$indices <- c(12:22)
panel.info$trimmed_names <- panel.info$full_names <-colnames(roc.data)[panel.info$indices]
print(panel.info$trimmed_names)
marker.data <- roc.data[, panel.info$indices]
#plot tSNE axes
tsne.plot <- ggplot(tSNE.data) + geom_point(aes(x=tSNE1, y=tSNE2), color='lightgrey') +
labs(x='t-SNE1', y='t-SNE2', title='37 Rocoglate Dataset') +
coord_fixed(ratio=1) + theme_bw() + theme(panel.grid = element_blank())
print(tsne.plot)
#KNN settings
kvalue <- 60
#set minimum cluster size
min.cluster <- 15
#DBSCAN settings
db.eps <- 2
#look for existing KNN labels file
knn.path <- og.output.path
setwd(knn.path)
knn.data.file <- dir(pattern='knn labels.RData')
rds.name <- paste0(knn.path, 'knn labels.RData')
#load knn.labels if the file exists; otherwise, calculate knn.labels
if(is.na(knn.data.file[1])){
start_time = Sys.time()
knn.labels = knn_MEM(tSNE.data, marker.data, kvalue=kvalue)
total_time = Sys.time() - start_time
print(' KNN MEM completed in ')
print(total_time)
#save as rds
save(knn.labels, file = paste0(og.output.path, 'knn labels.RData'))
}else{load(file=rds.name)}
#specify searching labels and goals
goals <- c('RP_Island_F', 'RP_Island_S', 'RP_Island_gH2AX', 'RP_Island_relMEM')
ref.labels <- c('gH2AX+10 p-4EBP1+7 Ki67+5 p-S6_S240/244+5 p-ERK+5 p-STAT3+4 p-HH3+4 p-S6_S235/236+3 p-STAT5+2 p-AKT+2 p-LCK+1',
'gH2AX+10 p-4EBP1+7',
'gH2AX+10',
'gH2AX+10 p-4EBP1+7 Ki67+5 p-S6_S240/244+5 p-STAT3+4 p-HH3+4') #MEM Label from RP Island
#set multi-round variables
current_round <- 2
multi.labels <- data.frame()
multi.df <- combined.sampled.data
#search for each ref label supplied
for (j in 3:length(goals)){
#get goal & search label
goal <- goals[j]
ref.label <- ref.labels[j]
print(paste0('searching for ', goal, ': ', ref.label))
# check that markers in the searching label are being measured in the new dataset
common.label <- check_panel(ref.label, panel.info)
common.ref.MEM.score <- common.label[[1]]
ref.label <- common.label[[2]]
# create output folder
current_round <- current_round + 1
run.folder <- paste0(og.output.path, goal, '/')
dir.create(run.folder)
#VR-Eye search and sim plot
common.MEM.scores <- knn.labels[, colnames(common.ref.MEM.score)]
#check if only one marker
if (!is.data.frame(common.MEM.scores)) {
common.MEM.scores <- as.data.frame(common.MEM.scores)
colnames(common.MEM.scores) <- colnames(common.ref.MEM.score)
}
#calculate similarity
print('calculating similarity')
sim <- sim_scores(common.MEM.scores, common.ref.MEM.score)
my.range <- max(sim)-min(sim)
sim.data <- cbind(marker.data, tSNE.data, File_ID=combined.sampled.data$File_ID, sim)
sim.plot <- VR_Eye_sim_plot(sim.data, ref.label)
#export
png(paste0(run.folder, goal, " similarity.png"),
height = 1500, width = 1500, res = 200)
print(sim.plot)
dev.off()
#save round information to multi.df
print('saving data to multi.df')
this.round <- c()
this.round = cbind(
VRPTR_round = current_round,
search_label = ref.label,
goal = goal,
min.clust = min.cluster,
kvalue = kvalue
)
multi.labels <- rbind(multi.labels, this.round)
save(multi.labels, file = paste0(og.output.path, "multi-run labels.RData"))
#save similarity score in multi-round results df
multi.df <- cbind(multi.df, sim)
colnames(multi.df)[ncol(multi.df)] <- paste0("r", current_round, "_", goal, "_sim")
#update multi.df
rds.name <- paste0(og.output.path, 'multi-run VRPTR.RData')
save(multi.df, file = rds.name)
}
colnames(knn.labels)
#specify searching labels and goals
goals <- c('RP_Island_F', 'RP_Island_S', 'RP_Island_gH2AX', 'RP_Island_relMEM')
ref.labels <- c('gH2AX+10 p-4EBP1+7 Ki67+5 p-S6_S240/244+5 p-ERK+5 p-STAT3+4 p-HH3+4 p-S6_S235/236+3 p-STAT5+2 p-AKT+2 p-LCK+1',
'gH2AX+10 p-4EBP1+7',
'gH2AX+10',
'gH2AX+10 p.4EBP1+7 Ki67+5 p..S6.S240.244.+5 p.STAT3+4 p.HH3+4') #MEM Label from RP Island
#set multi-round variables
current_round <- 3
multi.labels <- data.frame()
multi.df <- combined.sampled.data
#search for each ref label supplied
for (j in 4:length(goals)){
#get goal & search label
goal <- goals[j]
ref.label <- ref.labels[j]
print(paste0('searching for ', goal, ': ', ref.label))
# check that markers in the searching label are being measured in the new dataset
common.label <- check_panel(ref.label, panel.info)
common.ref.MEM.score <- common.label[[1]]
ref.label <- common.label[[2]]
# create output folder
current_round <- current_round + 1
run.folder <- paste0(og.output.path, goal, '/')
dir.create(run.folder)
#VR-Eye search and sim plot
common.MEM.scores <- knn.labels[, colnames(common.ref.MEM.score)]
#check if only one marker
if (!is.data.frame(common.MEM.scores)) {
common.MEM.scores <- as.data.frame(common.MEM.scores)
colnames(common.MEM.scores) <- colnames(common.ref.MEM.score)
}
#calculate similarity
print('calculating similarity')
sim <- sim_scores(common.MEM.scores, common.ref.MEM.score)
my.range <- max(sim)-min(sim)
sim.data <- cbind(marker.data, tSNE.data, File_ID=combined.sampled.data$File_ID, sim)
sim.plot <- VR_Eye_sim_plot(sim.data, ref.label)
#export
png(paste0(run.folder, goal, " similarity.png"),
height = 1500, width = 1500, res = 200)
print(sim.plot)
dev.off()
#save round information to multi.df
print('saving data to multi.df')
this.round <- c()
this.round = cbind(
VRPTR_round = current_round,
search_label = ref.label,
goal = goal,
min.clust = min.cluster,
kvalue = kvalue
)
multi.labels <- rbind(multi.labels, this.round)
save(multi.labels, file = paste0(og.output.path, "multi-run labels.RData"))
#save similarity score in multi-round results df
multi.df <- cbind(multi.df, sim)
colnames(multi.df)[ncol(multi.df)] <- paste0("r", current_round, "_", goal, "_sim")
#update multi.df
rds.name <- paste0(og.output.path, 'multi-run VRPTR.RData')
save(multi.df, file = rds.name)
}
colnames(knn.labels)
#specify searching labels and goals
goals <- c('RP_Island_F', 'RP_Island_S', 'RP_Island_gH2AX', 'RP_Island_relMEM')
ref.labels <- c('gH2AX+10 p-4EBP1+7 Ki67+5 p-S6_S240/244+5 p-ERK+5 p-STAT3+4 p-HH3+4 p-S6_S235/236+3 p-STAT5+2 p-AKT+2 p-LCK+1',
'gH2AX+10 p-4EBP1+7',
'gH2AX+10',
'gH2AX+10 p.4EBP1+7 Ki67+5 p.S6..S240.244.+5 p.STAT3+4 p.HH3+4') #MEM Label from RP Island
#set multi-round variables
current_round <- 3
multi.labels <- data.frame()
multi.df <- combined.sampled.data
#search for each ref label supplied
for (j in 4:length(goals)){
#get goal & search label
goal <- goals[j]
ref.label <- ref.labels[j]
print(paste0('searching for ', goal, ': ', ref.label))
# check that markers in the searching label are being measured in the new dataset
common.label <- check_panel(ref.label, panel.info)
common.ref.MEM.score <- common.label[[1]]
ref.label <- common.label[[2]]
# create output folder
current_round <- current_round + 1
run.folder <- paste0(og.output.path, goal, '/')
dir.create(run.folder)
#VR-Eye search and sim plot
common.MEM.scores <- knn.labels[, colnames(common.ref.MEM.score)]
#check if only one marker
if (!is.data.frame(common.MEM.scores)) {
common.MEM.scores <- as.data.frame(common.MEM.scores)
colnames(common.MEM.scores) <- colnames(common.ref.MEM.score)
}
#calculate similarity
print('calculating similarity')
sim <- sim_scores(common.MEM.scores, common.ref.MEM.score)
my.range <- max(sim)-min(sim)
sim.data <- cbind(marker.data, tSNE.data, File_ID=combined.sampled.data$File_ID, sim)
sim.plot <- VR_Eye_sim_plot(sim.data, ref.label)
#export
png(paste0(run.folder, goal, " similarity.png"),
height = 1500, width = 1500, res = 200)
print(sim.plot)
dev.off()
#save round information to multi.df
print('saving data to multi.df')
this.round <- c()
this.round = cbind(
VRPTR_round = current_round,
search_label = ref.label,
goal = goal,
min.clust = min.cluster,
kvalue = kvalue
)
multi.labels <- rbind(multi.labels, this.round)
save(multi.labels, file = paste0(og.output.path, "multi-run labels.RData"))
#save similarity score in multi-round results df
multi.df <- cbind(multi.df, sim)
colnames(multi.df)[ncol(multi.df)] <- paste0("r", current_round, "_", goal, "_sim")
#update multi.df
rds.name <- paste0(og.output.path, 'multi-run VRPTR.RData')
save(multi.df, file = rds.name)
}
#load packages into the working library
suppressPackageStartupMessages({library(Biobase)
library(flowCore)
library(ggplot2)
library(tidyverse)
library(cowplot)
library(RColorBrewer)
#library(viridis)
#library(data.table)
library(stringr)
library(FNN)
#library(matrixStats)
library(cytoMEM)
#library(gplots)
#library(gbutils)
library(dbscan)
library(scales)})
source("./R/tSNE_plots.R")
source("./R/VR-Eye_functions.R")
source("./R/VR-Eye_plots.R")
source('./R/tatarize_color_palette.R')
expr.colors = colorRampPalette(rev(brewer.pal(n = 11, name = "Spectral")))(5)
#specify fcs file location and output path
file.path <- paste0(getwd(), '/data files/37 roc characterization/')
og.output.path <- paste0(getwd(), '/output files/37 Roc Dataset/')
dir.create(og.output.path)
#locate fcs file
data.files <- dir(path = file.path, pattern = "*.csv")
print(data.files)
fcs.files <- dir(path = file.path, pattern = "*.fcs")
print(fcs.files)
#do you wish to downsample the data?
sample.files <- FALSE
sample.num <- 1000
# #load cell data
# setwd(file.path)
# roc.data <- read.csv(data.files, row.names = 1)
# colnames(roc.data)
#get compound names
sample.group <- '37 Roc Dataset'
sample.compound <- unique(roc.data$Compound)
sample.subclass <- unique(roc.data$ROC_subclass)
#load gated data
data.list <- lapply(lapply(fcs.files, read.table, skip=1), exprs)
